// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"

import mock "github.com/stretchr/testify/mock"
import models "github.com/wallacebenevides/star-wars-api/models"

// PlanetsDAO is an autogenerated mock type for the PlanetsDAO type
type PlanetsDAO struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, planets
func (_m *PlanetsDAO) Create(ctx context.Context, planets *models.Planet) error {
	ret := _m.Called(ctx, planets)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Planet) error); ok {
		r0 = rf(ctx, planets)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: cxt, filter
func (_m *PlanetsDAO) Delete(cxt context.Context, filter interface{}) error {
	ret := _m.Called(cxt, filter)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(cxt, filter)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx, filter
func (_m *PlanetsDAO) FindAll(ctx context.Context, filter interface{}) ([]models.Planet, error) {
	ret := _m.Called(ctx, filter)

	var r0 []models.Planet
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) []models.Planet); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Planet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: cxt, filter
func (_m *PlanetsDAO) FindByID(cxt context.Context, filter interface{}) (*models.Planet, error) {
	ret := _m.Called(cxt, filter)

	var r0 *models.Planet
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) *models.Planet); ok {
		r0 = rf(cxt, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Planet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(cxt, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByName provides a mock function with given fields: cxt, filter
func (_m *PlanetsDAO) FindByName(cxt context.Context, filter interface{}) ([]models.Planet, error) {
	ret := _m.Called(cxt, filter)

	var r0 []models.Planet
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) []models.Planet); ok {
		r0 = rf(cxt, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Planet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(cxt, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
