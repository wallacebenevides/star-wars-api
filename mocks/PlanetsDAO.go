// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	models "github.com/wallacebenevides/star-wars-api/models"
)

// PlanetsDAO is an autogenerated mock type for the PlanetsDAO type
type PlanetsDAO struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *PlanetsDAO) Create(_a0 *models.Planet) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Planet) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *PlanetsDAO) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields:
func (_m *PlanetsDAO) FindAll() ([]models.Planet, error) {
	ret := _m.Called()

	var r0 []models.Planet
	if rf, ok := ret.Get(0).(func() []models.Planet); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Planet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: id
func (_m *PlanetsDAO) FindById(id string) (*models.Planet, error) {
	ret := _m.Called(id)

	var r0 *models.Planet
	if rf, ok := ret.Get(0).(func(string) *models.Planet); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Planet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByName provides a mock function with given fields: name
func (_m *PlanetsDAO) FindByName(name string) ([]models.Planet, error) {
	ret := _m.Called(name)

	var r0 []models.Planet
	if rf, ok := ret.Get(0).(func(string) []models.Planet); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Planet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
